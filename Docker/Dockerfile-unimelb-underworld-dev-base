FROM debian:jessie

# Should lock that down to a specific version !

MAINTAINER Louis Moresi

## the update is fine but very slow ... keep it separated so it doesn't
## get run again and break the cache. The later parts of this build
## may be sensitive to later versions being picked up in the install phase.

RUN apt-get update -y ;

# install things (this just matches the standard u/w base )
RUN apt-get update -qq && \
    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
    bash-completion \
    build-essential \
    git \
    python \
    python-dev \
    petsc-dev \
    libhdf5-openmpi-dev \
    python-pip \
    libxml2-dev \
    xorg-dev \
    ssh \
    curl \
    libfreetype6-dev \
    libpng12-dev \
    libxft-dev \
    xvfb \
    freeglut3 \
    freeglut3-dev \
    libgl1-mesa-dri \
    libgl1-mesa-glx \
    rsync \
    vim \
    less \
    xauth \
    python-tk \
    swig

RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        libopenblas-dev \
        liblapack-dev \
        libscalapack-mpi-dev \
        libhdf5-serial-dev \
        libnetcdf-dev \
        gfortran \
        cython \
        python-numpy \
        python-scipy \
        python-matplotlib \
        pkg-config

# Important to avoid problems later:
RUN pip install --upgrade pip

RUN pip install \
    appdirs \
    packaging \
    numpy \
    plotly \
    mpi4py \
    matplotlib \
    runipy \
    pillow

RUN pip install six --upgrade --force-reinstall

RUN pip install \
    pyvirtualdisplay \
    ipyparallel \
    pint \
    sphinx \
    sphinx_rtd_theme \
    sphinxcontrib-napoleon \
    mock

RUN pip install \
    scipy --upgrade && \
    pip install 'ipython==4.2.0' --force-reinstall

RUN pip install jupyter


#   ^^^ Note we choose an older version of ipython because it's tooltips work better.
#       Also, the system six is too old, so we upgrade for the pip version


# Install Tini.. this is required because CMD (below) doesn't play nice with notebooks for some reason: https://github.com/ipython/ipython/issues/7062, https://github.com/jupyter/notebook/issues/334
RUN curl -L https://github.com/krallin/tini/releases/download/v0.6.0/tini > tini && \
    echo "d5ed732199c36a1189320e6c4859f0169e950692f451c03e7854243b95f4234b *tini" | sha256sum -c - && \
    mv tini /usr/local/bin/tini && \
    chmod +x /usr/local/bin/tini

# script for xvfb-run.  all docker commands will effectively run under this via the entrypoint
RUN printf "#\041/bin/sh \n rm -f /tmp/.X99-lock && xvfb-run -a -s '-screen 0 1600x1200x16' \$@" >> /usr/local/bin/xvfbrun.sh && \
    chmod +x /usr/local/bin/xvfbrun.sh

# Add a notebook profile.
RUN mkdir -p -m 700 /root/.jupyter/ && \
    echo "c.NotebookApp.ip = '*'" >> /root/.jupyter/jupyter_notebook_config.py

# Setup ipyparallel for mpi profile
WORKDIR /root/.jupyter
RUN ipcluster nbextension enable && \
    ipython profile create --parallel --profile=mpi && \
    echo "c.IPClusterEngines.engine_launcher_class = 'MPIEngineSetLauncher'" >> /root/.ipython/profile_mpi/ipcluster_config.py

# set working directory to /underworld
RUN mkdir -p /underworld
WORKDIR /underworld

# setup environment
ENV PYTHONPATH $PYTHONPATH:/underworld/underworld2

# get underworld, compile, delete some unnecessary files, trust notebooks, copy to workspace
RUN git clone --branch "development" --single-branch https://github.com/underworldcode/underworld2

RUN cd underworld2/libUnderworld && \
    ./configure.py --with-debugging=0  && \
    ./compile.py                 && \
    rm .sconsign.dblite          && \
    rm -fr .sconf_temp           && \
    cd build                     && \
    rm -fr libUnderworldPy       && \
    rm -fr StGermain             && \
    rm -fr gLucifer              && \
    rm -fr Underworld            && \
    rm -fr StgFEM                && \
    rm -fr StgDomain             && \
    rm -fr PICellerator          && \
    rm -fr Solvers

RUN cd underworld2/libUnderworld && \
    find /underworld/underworld2/docs -name \*.ipynb  -print0 | xargs -0 jupyter trust && \
    mkdir /workspace                                                 && \
    rsync -av /underworld/underworld2/docs/examples /workspace             && \
    rsync -av /underworld/underworld2/docs/user_guide /workspace           && \
    rsync -av /underworld/underworld2/docs/publications /workspace

RUN cd /underworld/underworld2/docs/development/api_doc_generator/                     && \
    sphinx-build . ../../api_doc


# Add a notebook profile.
RUN mkdir -p -m 700 /root/.jupyter/ && \
    echo "c.NotebookApp.ip = '*'" >> /root/.jupyter/jupyter_notebook_config.py

# note we also use xvfb which is required for viz
ENTRYPOINT ["/usr/local/bin/tini", "--", "xvfbrun.sh"]

# Let the base image launch bash as root.
# We can tie down the derived images to
# have a low-status user (professor diablo)

# USER profldiablo
# ENV USER=profldiablo

# expose notebook port
EXPOSE 8888

# launch notebook
CMD ["jupyter", "notebook", " --no-browser"]
